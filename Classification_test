{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dona-frj/semantic/blob/master/Classification_test\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-3N6d9doG2I_"
      },
      "source": [
        "!mkdir data"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AqWQsE6EQZEf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8a2937f1-459e-46ae-ddca-9939b3f6748d"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dEh792W9t5Oh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd334aa2-42b9-44ef-a3ac-6b5b0654f39a"
      },
      "source": [
        "! unzip /content/drive/MyDrive/aquaint.zip -d'/content/data'"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/drive/MyDrive/aquaint.zip\n",
            "   creating: /content/data/aquaint/\n",
            "   creating: /content/data/aquaint/RawText/\n",
            "  inflating: /content/data/aquaint/RawText/APW19980603_0791.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980603_1617.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980604_0787.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980610_0111.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980611_0774.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980614_0031.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980615_0417.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980620_0458.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980624_0436.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980624_0607.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980625_1136.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980627_0596.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980709_0263.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980713_0449.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980808_0196.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980811_0512.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980816_0994.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980824_0827.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980903_1073.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980917_0818.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980930_0284.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19980930_0522.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981001_0866.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981010_0354.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981020_1367.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981022_0630.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981022_0710.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981026_0096.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981106_0920.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981109_0140.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981109_0152.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981109_0440.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981109_0464.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981109_1089.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981109_1172.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981113_0500.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981113_0729.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981119_0585.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981120_1056.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981130_0743.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981210_0433.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19981215_1083.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19990120_0179.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19990203_0315.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19990519_0141.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19990526_0131.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19990827_0137.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW19990827_0184.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW20000303_0067.htm  \n",
            "  inflating: /content/data/aquaint/RawText/APW20000312_0050.htm  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5tUBg6hWG1eR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0bb3a303-0e32-4de3-f1e9-30371ca93198"
      },
      "source": [
        "!unzip aquaint.zip"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "unzip:  cannot find or open aquaint.zip, aquaint.zip.zip or aquaint.zip.ZIP.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ed479ThH5Qke",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3dd98bd-4af3-407b-84f8-6a7357722984"
      },
      "source": [
        "import nltk\n",
        "nltk.download('punkt')\n",
        "from nltk.tokenize import word_tokenize , sent_tokenize\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "from tqdm import tqdm\n",
        "from gensim.parsing.preprocessing import strip_multiple_whitespaces\n",
        "from gensim.parsing.preprocessing import strip_non_alphanum ,strip_short\n",
        "from gensim.parsing.preprocessing import preprocess_documents\n",
        "from gensim.parsing.preprocessing import remove_stopwords, preprocess_string"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m3tTA22fUUnx",
        "outputId": "cf5259e5-baf9-400d-8696-1a4b03061b38"
      },
      "source": [
        "pip install tqdm"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (4.62.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OVF4tkO6KXqd"
      },
      "source": [
        "/////////////////////////// creat data to list"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oFAzg1wSKd8z"
      },
      "source": [
        "import os\n",
        "from tqdm import tqdm\n",
        "path = '/content/data/aquaint/RawText/'\n",
        "list_txt=[]\n",
        "tokenized_sent = [] #من اجل تخزين الجمل الماخوذة من النصوص\n",
        "for txt  in os.listdir(path):\n",
        "  f = open(os.path.join(path,txt), \"r\")         \n",
        "  _txt= f.read()\n",
        "  _txt=strip_multiple_whitespaces(_txt)\n",
        "  _txt= remove_stopwords(_txt)\n",
        "  _txt= sent_tokenize(_txt) \n",
        "  for i in _txt:\n",
        "    t1=strip_non_alphanum(i) \n",
        "    t1=strip_short(t1,minsize=3)\n",
        "    t2=remove_stopwords(t1)\n",
        "    \n",
        "  \n",
        "    list_txt.append(t2)\n",
        "list_txt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FGTXmylmREYr",
        "outputId": "a0969f21-1c5f-42ec-9847-af7dfc2551d0"
      },
      "source": [
        "for s in list_txt:\n",
        "    tokenized_sent.append(word_tokenize(s.lower()))\n",
        "len(tokenized_sent)\n",
        "# tokenized_sent"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "517"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cBfkhyqWS0PL"
      },
      "source": [
        "from gensim.models.doc2vec import Doc2Vec, TaggedDocument\n",
        "tagged_data = [TaggedDocument(d, [i]) for i, d in enumerate(tokenized_sent)]\n",
        "tagged_data"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4496DR4kp_L",
        "outputId": "50b2f725-6e45-4d3d-afd4-37afeb06156a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(__doc__)\n",
        "import numpy as np\n",
        "from sklearn.cluster import AffinityPropagation\n",
        "from sklearn import metrics\n",
        "from sklearn.datasets.samples_generator import make_blobs\n",
        "from scipy.spatial.distance import pdist"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "vector_size = Dimensionality of the feature vectors.\n",
            "window = The maximum distance between the current and predicted word within a sentence.\n",
            "min_count = Ignores all words with total frequency lower than this.\n",
            "alpha = The initial learning rate.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "iI-7D0uJTM7x",
        "outputId": "62e121e7-0ad6-4c37-b050-fc4af098a50b"
      },
      "source": [
        "model = Doc2Vec(tagged_data, vector_size = 20, window = 2, min_count = 1, epochs = 100)\n",
        "\n",
        "'''\n",
        "vector_size = Dimensionality of the feature vectors.\n",
        "window = The maximum distance between the current and predicted word within a sentence.\n",
        "min_count = Ignores all words with total frequency lower than this.\n",
        "alpha = The initial learning rate.\n",
        "'''\n",
        "\n",
        "## Print model vocabulary\n",
        "model.wv.vocab\n",
        "test_doc = word_tokenize(\"We maximum distance and predicted word within a sentence\".lower())\n",
        "test_doc_vector = model.infer_vector(test_doc)\n",
        "model.docvecs.most_similar(positive = [test_doc_vector])\n",
        "\n",
        "#generate data\n",
        "centers = model.docvecs.most_similar(positive = [test_doc_vector])\n",
        "X, labels_true = make_blobs(n_samples = len(tokenized_sent), centers = centers, cluster_std = 0.5, random_state = 0)\n",
        "\n",
        "# Compute Affinity Propagation\n",
        "af = AffinityPropagation(preference =-50).fit(X)\n",
        "cluster_centers_indices = af.cluster_centers_indices_\n",
        "labels = af.labels_\n",
        "  \n",
        "n_clusters_ = len(cluster_centers_indices)\n",
        "\n",
        "print('Estimated number of clusters: %d' % n_clusters_)\n",
        "print(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels_true, labels))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels_true, labels))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels_true, labels))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels_true, labels))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels_true, labels))\n",
        "\n",
        "# Plot result\n",
        "import matplotlib.pyplot as plt\n",
        "from itertools import cycle\n",
        "  \n",
        "plt.close('all')\n",
        "plt.figure(1)\n",
        "plt.clf()\n",
        "  \n",
        "colors = cycle('bgrcmykbgrcmykbgrcmykbgrcmyk')\n",
        "  \n",
        "for k, col in zip(range(n_clusters_), colors):\n",
        "    class_members = labels == k\n",
        "    cluster_center = X[cluster_centers_indices[k]]\n",
        "    plt.plot(X[class_members, 0], X[class_members, 1], col + '.')\n",
        "    plt.plot(cluster_center[0], cluster_center[1], 'o',\n",
        "             markerfacecolor = col, markeredgecolor ='k',\n",
        "             markersize = 14)\n",
        "  \n",
        "    for x in X[class_members]:\n",
        "        plt.plot([cluster_center[0], x[0]], \n",
        "                 [cluster_center[1], x[1]], col)\n",
        "  \n",
        "plt.title('Estimated number of clusters: % d' % n_clusters_)\n",
        "# plt.show()\n",
        "print(test_doc_vector)\n",
        "from sklearn.metrics import accuracy_score\n",
        "# accuracy = accuracy_score(, labels_test)"
      ],
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated number of clusters: 8\n",
            "Homogeneity: 0.844\n",
            "Completeness: 0.950\n",
            "V-measure: 0.894\n",
            "Adjusted Rand Index: 0.768\n",
            "Adjusted Mutual Information: 0.891\n",
            "[ 0.55849123 -0.69571507  0.72072345 -0.11621635 -0.62765044  1.1390905\n",
            "  0.04100462 -0.01433095  0.07960067  0.71763     0.0334705   0.34560037\n",
            "  0.21666656  0.51931864  0.22073665  0.37585285 -0.41609195 -0.6537951\n",
            " -0.3032406  -0.26033983]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_xx-s5udJW8w"
      },
      "source": [
        ""
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AxjCt8oJ3Lx8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0b2a5575-468f-4472-b8e4-9b8edd22b54f"
      },
      "source": [
        "pip install transformers "
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.7/dist-packages (4.10.3)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.8.1)\n",
            "Requirement already satisfied: huggingface-hub>=0.0.12 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.17)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (5.4.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.62.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (21.0)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n",
            "Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.45)\n",
            "Requirement already satisfied: tokenizers<0.11,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.10.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from huggingface-hub>=0.0.12->transformers) (3.7.4.3)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers) (3.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2021.5.30)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d9ytVYBSxLTd"
      },
      "source": [
        "## for deep learning\n",
        "from tensorflow.keras import models, layers, preprocessing as kprocessing\n",
        "from tensorflow.keras import backend as K\n",
        "## for bert language model\n",
        "import transformers\n",
        "## for data\n",
        "import json\n",
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "execution_count": 128,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "PwDiB-wFxytN",
        "outputId": "3b7a960e-d698-4318-93d2-4a3b2a83afb2"
      },
      "source": [
        "txt = list_txt[:510]\n",
        "## bert tokenizer\n",
        "tokenizer = transformers.BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)\n",
        "## bert model\n",
        "nlp = transformers.TFBertModel.from_pretrained('bert-base-uncased')\n",
        "## return hidden layer with embeddings\n",
        "input_ids = np.array(tokenizer.encode(txt))[None,:]  \n",
        "embedding = nlp(input_ids)\n",
        "embedding[0][0]\n",
        "#########################################\n",
        "#generate data\n",
        "centers = embedding[0][0]\n",
        "X, labels_true = make_blobs(n_samples = len(txt), centers = centers, cluster_std = 0.5, random_state = 0)\n",
        "\n",
        "# Compute Affinity Propagation\n",
        "af = AffinityPropagation(preference =-50).fit(X)\n",
        "cluster_centers_indices = af.cluster_centers_indices_\n",
        "labels = af.labels_\n",
        "  \n",
        "n_clusters_ = len(cluster_centers_indices)\n",
        "\n",
        "print('Estimated number of clusters: %d' % n_clusters_)\n",
        "print(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels_true, labels))\n",
        "print(\"Completeness: %0.3f\" % metrics.completeness_score(labels_true, labels))\n",
        "print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels_true, labels))\n",
        "print(\"Adjusted Rand Index: %0.3f\"\n",
        "      % metrics.adjusted_rand_score(labels_true, labels))\n",
        "print(\"Adjusted Mutual Information: %0.3f\"\n",
        "      % metrics.adjusted_mutual_info_score(labels_true, labels))\n",
        "\n",
        "###################################\n",
        "# Plot result\n",
        "import matplotlib.pyplot as plt\n",
        "from itertools import dropwhile\n",
        "  \n",
        "plt.close('all')\n",
        "plt.figure(1)\n",
        "plt.clf()\n",
        "  \n",
        "colors = cycle('bgrcmykbgrcmykbgrcmykbgrcmyk')\n",
        "  \n",
        "for k, col in zip(range(n_clusters_), colors):\n",
        "    class_members = labels == k\n",
        "    cluster_center = X[cluster_centers_indices[k]]\n",
        "    plt.plot(X[class_members, 0], X[class_members, 1], col + '.')\n",
        "    plt.plot(cluster_center[0], cluster_center[1], 'o',\n",
        "             markerfacecolor = col, markeredgecolor ='k',\n",
        "             markersize = 14)\n",
        "  \n",
        "    for x in X[class_members]:\n",
        "        plt.plot([cluster_center[0], x[0]], \n",
        "                 [cluster_center[1], x[1]], col)\n",
        "  \n",
        "plt.title('Estimated number of clusters: % d' % n_clusters_)\n",
        "plt.show()\n"
      ],
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some layers from the model checkpoint at bert-base-uncased were not used when initializing TFBertModel: ['mlm___cls', 'nsp___cls']\n",
            "- This IS expected if you are initializing TFBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing TFBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "All the layers of TFBertModel were initialized from the model checkpoint at bert-base-uncased.\n",
            "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated number of clusters: 510\n",
            "Homogeneity: 1.000\n",
            "Completeness: 1.000\n",
            "V-measure: 1.000\n",
            "Adjusted Rand Index: 1.000\n",
            "Adjusted Mutual Information: 1.000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UiqUPYnU1DH-",
        "outputId": "47bc30ef-96fd-48c2-8957-0430db1224f9"
      },
      "source": [
        "lst_dics = txt\n",
        "## print the first one\n",
        "lst_dics\n",
        "## create dtf\n",
        "dtf = pd.DataFrame(lst_dics)\n",
        "## rename columns\n",
        "dtf = dtf.rename(columns={\"category\":\"y\", \"headline\":\"text\"})\n",
        "## print 10 random rows\n",
        "dtf.sample(10)\n",
        "print('the number of vector is: ',len(lst_dics))\n",
        "print(dtf.sample(10))"
      ],
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the number of vector is:  510\n",
            "                                                     0\n",
            "104            Guards stationed staircase man ran past\n",
            "192  Earnings sponsorship proposal apparently help ...\n",
            "120  Tuesday Iran recalled ambassador Prague protes...\n",
            "411  Actress Brooke Shields accepts libel damages a...\n",
            "221                                               parf\n",
            "257  The Japanese police official said assembly dis...\n",
            "48   quoted Foreign Minister Kamal Kharrazi saying ...\n",
            "145  The elephants sent month Dresden Erfurt zoos e...\n",
            "99   United spokeswoman Kristina Price said 131 fli...\n",
            "389                                         Senior Sgt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kj00MEOd5MFb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d0f101e-aa8d-44bc-b124-e7aa1ec92bd1"
      },
      "source": [
        "pip install sentence_transformers"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: sentence_transformers in /usr/local/lib/python3.7/dist-packages (2.0.0)\n",
            "Requirement already satisfied: sentencepiece in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (0.1.96)\n",
            "Requirement already satisfied: torch>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (1.9.0+cu102)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (1.4.1)\n",
            "Requirement already satisfied: transformers<5.0.0,>=4.6.0 in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (4.10.3)\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (3.2.5)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (0.10.0+cu102)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (1.19.5)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (4.62.2)\n",
            "Requirement already satisfied: huggingface-hub in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (0.0.17)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sentence_transformers) (0.22.2.post1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch>=1.6.0->sentence_transformers) (3.7.4.3)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (4.8.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (5.4.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (21.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (2.23.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (3.0.12)\n",
            "Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (0.0.45)\n",
            "Requirement already satisfied: tokenizers<0.11,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (0.10.3)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (2019.12.20)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers<5.0.0,>=4.6.0->sentence_transformers) (2.4.7)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers<5.0.0,>=4.6.0->sentence_transformers) (3.5.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from nltk->sentence_transformers) (1.15.0)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers<5.0.0,>=4.6.0->sentence_transformers) (1.24.3)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers<5.0.0,>=4.6.0->sentence_transformers) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers<5.0.0,>=4.6.0->sentence_transformers) (2021.5.30)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers<5.0.0,>=4.6.0->sentence_transformers) (3.0.4)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers<5.0.0,>=4.6.0->sentence_transformers) (1.0.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers<5.0.0,>=4.6.0->sentence_transformers) (7.1.2)\n",
            "Requirement already satisfied: pillow>=5.3.0 in /usr/local/lib/python3.7/dist-packages (from torchvision->sentence_transformers) (7.1.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F9lnVSWh47Rd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e67afae6-9910-4f36-d89f-fe60994a377d"
      },
      "source": [
        "from transformers.utils.dummy_vision_objects import DeiTFeatureExtractor\n",
        "import numpy as np\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from nltk import sent_tokenize\n",
        "from sentence_transformers import SentenceTransformer\n",
        "import os\n",
        "\n",
        "base_document = ['we will not go in the next few minutes ','the first thing is the one that ','the one thing that has to do is the way you are '] ####must add my clean data here to compare with!!\n",
        "documents = [\"what a wonderful World\".lower()]  ####the text to compare with\n",
        "\n",
        "def process_bert_similarity():\n",
        "\t# This will download and load the pretrained model offered by UKPLab.\n",
        "\tmodel = SentenceTransformer('bert-base-nli-mean-tokens')\n",
        "\n",
        "\t# Although it is not explicitly stated in the official document of sentence transformer, the original BERT is meant for a shorter sentence. We will feed the model by sentences instead of the whole documents.\n",
        "\tsentences = base_document\n",
        "\tbase_embeddings_sentences = model.encode(sentences)\n",
        "\tbase_embeddings = np.mean(np.array(base_embeddings_sentences), axis=0)\n",
        "\n",
        "\tvectors = []\n",
        "\tfor i, document in enumerate(base_document):\n",
        "\n",
        "\t\tsentences = sent_tokenize(document)\n",
        "\t\tembeddings_sentences = model.encode(sentences)\n",
        "\t\tembeddings = np.mean(np.array(embeddings_sentences), axis=0)\n",
        "\n",
        "\t\tvectors.append(embeddings)\n",
        "\n",
        "\t\tprint(\"making vector at index:\", i)\n",
        "\n",
        "\tscores = cosine_similarity([base_embeddings],vectors).flatten()\n",
        "\n",
        "\thighest_score = 0\n",
        "\thighest_score_index = 0\n",
        "\tfor i, score in enumerate(scores):\n",
        "\t\tif highest_score < score:\n",
        "\t\t\thighest_score = score\n",
        "\t\t\thighest_score_index = i\n",
        "\n",
        "\tmost_similar_document = base_document[highest_score_index]\n",
        "\tprint(documents ,'\\n',\"Most similar document by BERT with the score:\", \"\\n\", [most_similar_document],'with accuracy : ', highest_score)\n",
        "\n",
        "process_bert_similarity()\n"
      ],
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "making vector at index: 0\n",
            "making vector at index: 1\n",
            "making vector at index: 2\n",
            "['what a wonderful world'] \n",
            " Most similar document by BERT with the score: \n",
            " ['the first thing is the one that '] with accuracy :  0.85914946\n"
          ]
        }
      ]
    }
  ]
}